import requests
import duckdb
import json

def get_exploited_ducks():
    print("----------------------------------------------")
    print("|                                             |")
    print("|                                             |")
    print("|                                             |")
    print("|              Exploited Duck                 |")
    print("|                                             |")
    print("|        Simple Cisa kev lookup by cve        |")
    print("|               KEV and duckdb                |")
    print("|                  created by                 |")
    print("|                 CHALKINGCODE                |")
    print("|                                             |")
    print("|                                             |")
    print("----------------------------------------------")

    # Asking if you have ran script before
    json_gen_q = input("Have you ever ran this script before and have the json data (yes or no)?  ")
    extra_sql = input("""What cve would you like to look up in the kev if all type ; if you would like to find others use sql commands starting by WHERE 
                                    for example: WHERE kevcves.cveID='CVE-2021-27102' OR kevcves.cveID='CVE-2021-27104'
                                          another example: WHERE kevcves.knownRansomwareCampaignUSE='Known'\n
                                                               type sql here:   """)
    
    print("\nThanks for using duckduckgoose we are now looking for your ducks\n")
    file = "kevcves.json"
    
    # Grabbing Results and returning in json format
    if json_gen_q == "no":
        print("Generating kev data and writing out to json file")
        get_data = requests.get(f"https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json")
        json_response = get_data.json()
        all_vulns = []
        
        for j in json_response["vulnerabilities"]:
            vulns =  j
            all_vulns.append(vulns)
       
        # Serializing json
        json_object = json.dumps(all_vulns, indent=4)

        # Writing to our json file
        with open(file, "w") as outfile:
            outfile.write(json_object)
   
    get_geese(file, extra_sql)

def get_geese(file, extra_sql):
    # Using duckdb to extract/filter data from json file instead of writing a for loop out. Duckdb is awesome and you can learn more about it here https://duckdb.org/"
    results = duckdb.sql(f"SELECT * FROM {file} {extra_sql}").fetchall()# read_json_objects({file}, format='newline_delimited', maximum_object_size=104857600)")
    result = duckdb.sql(f"SELECT * FROM {file} {extra_sql}")
    the_result = print(result)
    file_type = input("What file type would you like your results written out to parquet or csv? ")
    
    if file_type == "csv":
        duckdb.sql(f"SELECT * FROM {file} {extra_sql}").write_csv("exploited_ducks.csv")
    else:
        duckdb.sql(f"SELECT * FROM {file} {extra_sql}").write_parquet("exploited_ducks.parquet")
    
    return(the_result)

get_exploited_ducks()
